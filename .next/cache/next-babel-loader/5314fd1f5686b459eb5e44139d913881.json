{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport format from 'comma-number';\nimport { Flex } from '@chakra-ui/core';\nimport { realtimeDb } from '../lib/db';\n\nvar ViewCounter = function ViewCounter(_ref) {\n  var id = _ref.id;\n\n  var _useState = useState(''),\n      views = _useState[0],\n      setViews = _useState[1];\n\n  useEffect(function () {\n    var onViews = function onViews(newViews) {\n      return setViews(newViews.val());\n    };\n\n    var db;\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return realtimeDb();\n\n              case 2:\n                db = _context.sent;\n                db.child(id).on('value', onViews);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n    return function () {\n      if (db) {\n        db.child(id).off('value', onViews);\n      }\n    };\n  }, [id]);\n  useEffect(function () {\n    var registerView = function registerView() {\n      return fetch(\".netlify/functions/increment-views?id=\".concat(encodeURIComponent(id)));\n    };\n\n    registerView();\n  }, [id]);\n  return __jsx(Flex, null, \"`$\", views ? format(views) : '–––', \" views`\");\n};\n\nexport default ViewCounter;","map":null,"metadata":{},"sourceType":"module"}