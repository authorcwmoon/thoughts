{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { Box, Callout, Code, Heading, Kbd, Link, PseudoBox, Text, Divider, useColorMode } from '@chakra-ui/core';\nimport { jsx } from '@emotion/core';\nimport NextLink from 'next/link';\n\nvar Table = function Table(props) {\n  return jsx(Box, {\n    overflowX: \"scroll\",\n    w: \"full\"\n  }, jsx(Box, _extends({\n    as: \"table\",\n    textAlign: \"left\",\n    mt: \"32px\",\n    w: \"full\"\n  }, props)));\n};\n\nvar THead = function THead(props) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var bg = {\n    light: 'gray.50',\n    dark: 'whiteAlpha.100'\n  };\n  return jsx(Box, _extends({\n    as: \"th\",\n    bg: bg[colorMode],\n    fontWeight: \"semibold\",\n    p: 2,\n    fontSize: \"sm\"\n  }, props));\n};\n\nvar TData = function TData(props) {\n  return jsx(Box, _extends({\n    as: \"td\",\n    p: 2,\n    borderTopWidth: \"1px\",\n    borderColor: \"inherit\",\n    fontSize: \"sm\",\n    whiteSpace: \"normal\"\n  }, props));\n};\n\nvar CustomLink = function CustomLink(props) {\n  var _useColorMode2 = useColorMode(),\n      colorMode = _useColorMode2.colorMode;\n\n  var color = {\n    light: 'hsl(208, 99%, 44%)',\n    dark: 'hsl(208, 95%, 68%)'\n  };\n  var href = props.href;\n  var isInternalLink = href && (href.startsWith('/') || href.startsWith('#'));\n\n  if (isInternalLink) {\n    return jsx(NextLink, {\n      href: href,\n      passHref: true\n    }, jsx(Link, _extends({\n      color: color[colorMode]\n    }, props)));\n  }\n\n  return jsx(Link, _extends({\n    color: color[colorMode],\n    isExternal: true\n  }, props));\n};\n\nvar Quote = function Quote(props) {\n  var _useColorMode3 = useColorMode(),\n      colorMode = _useColorMode3.colorMode;\n\n  var bgColor = {\n    light: 'blue.50',\n    dark: 'blue.900'\n  };\n  return jsx(Callout, _extends({\n    mt: 4,\n    w: \"98%\",\n    bg: bgColor[colorMode],\n    variant: \"left-accent\",\n    status: \"info\",\n    css: {\n      '> *:first-of-type': {\n        marginTop: 0,\n        marginLeft: 8\n      }\n    }\n  }, props));\n};\n\nvar DocsHeading = function DocsHeading(props) {\n  return jsx(Heading, _extends({\n    css: {\n      scrollMarginTop: '100px',\n      scrollSnapMargin: '100px',\n      // Safari\n      '&[id]': {\n        pointerEvents: 'none'\n      },\n      '&[id]:before': {\n        display: 'block',\n        height: ' 6rem',\n        marginTop: '-6rem',\n        visibility: 'hidden',\n        content: \"\\\"\\\"\"\n      },\n      '&[id]:hover a': {\n        opacity: 1\n      }\n    }\n  }, props, {\n    mb: \"1em\",\n    mt: \"2em\"\n  }), jsx(Box, {\n    pointerEvents: \"auto\"\n  }, props.children, props.id && jsx(PseudoBox, {\n    \"aria-label\": \"anchor\",\n    as: \"a\",\n    color: \"blue.500\",\n    fontWeight: \"normal\",\n    outline: \"none\",\n    _focus: {\n      opacity: 1,\n      boxShadow: 'outline'\n    } // opacity=\"0\"\n    ,\n    ml: \"0.375rem\" // href={`#${props.id}`}\n\n  }, \"#\")));\n};\n\nvar Hr = function Hr() {\n  var _useColorMode4 = useColorMode(),\n      colorMode = _useColorMode4.colorMode;\n\n  var borderColor = {\n    light: 'gray.200',\n    dark: 'gray.600'\n  };\n  return jsx(Divider, {\n    borderColor: borderColor[colorMode],\n    my: 4,\n    w: \"100%\"\n  });\n};\n\nvar MDXComponents = {\n  h1: function h1(props) {\n    return jsx(Heading, _extends({\n      as: \"h1\",\n      size: \"xl\",\n      my: 4\n    }, props));\n  },\n  h2: function h2(props) {\n    return jsx(DocsHeading, _extends({\n      as: \"h2\",\n      fontWeight: \"bold\",\n      size: \"lg\"\n    }, props));\n  },\n  h3: function h3(props) {\n    return jsx(DocsHeading, _extends({\n      as: \"h3\",\n      size: \"md\",\n      fontWeight: \"bold\"\n    }, props));\n  },\n  inlineCode: function inlineCode(props) {\n    return jsx(Code, _extends({\n      variantColor: \"yellow\",\n      fontSize: \"0.84em\"\n    }, props));\n  },\n  kbd: Kbd,\n  br: function br(props) {\n    return jsx(Box, _extends({\n      height: \"24px\"\n    }, props));\n  },\n  hr: Hr,\n  table: Table,\n  th: THead,\n  td: TData,\n  a: CustomLink,\n  p: function p(props) {\n    return jsx(Text, _extends({\n      as: \"p\",\n      mt: 4,\n      lineHeight: \"tall\"\n    }, props));\n  },\n  ul: function ul(props) {\n    return jsx(Box, _extends({\n      as: \"ul\",\n      pt: 2,\n      pl: 4,\n      ml: 2\n    }, props));\n  },\n  ol: function ol(props) {\n    return jsx(Box, _extends({\n      as: \"ol\",\n      pt: 2,\n      pl: 4,\n      ml: 2\n    }, props));\n  },\n  li: function li(props) {\n    return jsx(Box, _extends({\n      as: \"li\",\n      pb: 1\n    }, props));\n  },\n  blockquote: Quote\n};\nexport { CustomLink };\nexport default MDXComponents;","map":null,"metadata":{},"sourceType":"module"}