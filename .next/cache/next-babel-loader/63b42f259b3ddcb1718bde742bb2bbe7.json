{"ast":null,"code":"var _jsxFileName = \"/Users/christian/thoughts/src/pages/posts/tags/[[...slug]].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../../components/Layout\";\nimport BasicMeta from \"../../../components/meta/BasicMeta\";\nimport OpenGraphMeta from \"../../../components/meta/OpenGraphMeta\";\nimport TwitterCardMeta from \"../../../components/meta/TwitterCardMeta\";\nimport TagPostList from \"../../../components/TagPostList\";\nimport config from \"../../../lib/config\";\nimport { countPosts, listPostContent } from \"../../../lib/posts\";\nimport { getTag, listTags } from \"../../../lib/tags\";\nimport { Stack, Flex } from \"@chakra-ui/core\";\nexport default function Index({\n  posts,\n  tag,\n  pagination,\n  page\n}) {\n  const url = `/posts/tags/${tag.name}` + (page ? `/${page}` : \"\");\n  const title = tag.name;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    as: \"main\",\n    spacing: 8,\n    justifyContent: \"center\",\n    alignItems: \"flex-start\",\n    m: \"0 auto 4rem auto\",\n    maxWidth: \"700px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 8\n    }\n  }, __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(BasicMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), __jsx(OpenGraphMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), __jsx(TwitterCardMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), __jsx(TagPostList, {\n    posts: posts,\n    tag: tag,\n    pagination: pagination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }))));\n}\nexport const getStaticProps = async ({\n  params\n}) => {\n  const queries = params.slug;\n  const [slug, page] = [queries[0], queries[1]];\n  const posts = listPostContent(page ? parseInt(page) : 1, config.posts_per_page, slug);\n  const tag = getTag(slug);\n  const pagination = {\n    current: page ? parseInt(page) : 1,\n    pages: Math.ceil(countPosts(slug) / config.posts_per_page)\n  };\n  const props = {\n    posts,\n    tag,\n    pagination\n  };\n\n  if (page) {\n    props.page = page;\n  }\n\n  return {\n    props\n  };\n};\nexport const getStaticPaths = async () => {\n  const paths = listTags().flatMap(tag => {\n    const pages = Math.ceil(countPosts(tag.slug) / config.posts_per_page);\n    return Array.from(Array(pages).keys()).map(page => page === 0 ? {\n      params: {\n        slug: [tag.slug]\n      }\n    } : {\n      params: {\n        slug: [tag.slug, (page + 1).toString()]\n      }\n    });\n  });\n  return {\n    paths: paths,\n    fallback: false\n  };\n};","map":{"version":3,"sources":["/Users/christian/thoughts/src/pages/posts/tags/[[...slug]].tsx"],"names":["Layout","BasicMeta","OpenGraphMeta","TwitterCardMeta","TagPostList","config","countPosts","listPostContent","getTag","listTags","Stack","Flex","Index","posts","tag","pagination","page","url","name","title","getStaticProps","params","queries","slug","parseInt","posts_per_page","current","pages","Math","ceil","props","getStaticPaths","paths","flatMap","Array","from","keys","map","toString","fallback"],"mappings":"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","sourcesContent":["import { GetStaticPaths, GetStaticProps } from \"next\";\nimport Layout from \"../../../components/Layout\";\nimport BasicMeta from \"../../../components/meta/BasicMeta\";\nimport OpenGraphMeta from \"../../../components/meta/OpenGraphMeta\";\nimport TwitterCardMeta from \"../../../components/meta/TwitterCardMeta\";\nimport TagPostList from \"../../../components/TagPostList\";\nimport config from \"../../../lib/config\";\nimport { countPosts, listPostContent, PostContent } from \"../../../lib/posts\";\nimport { getTag, listTags, TagContent } from \"../../../lib/tags\";\nimport Head from \"next/head\";\nimport { Stack, Flex } from \"@chakra-ui/core\";\n\ntype Props = {\n  posts: PostContent[];\n  tag: TagContent;\n  page?: string;\n  pagination: {\n    current: number;\n    pages: number;\n  };\n};\nexport default function Index({ posts, tag, pagination, page }: Props) {\n  const url = `/posts/tags/${tag.name}` + (page ? `/${page}` : \"\");\n  const title = tag.name;\n  return (\n    <Layout>\n       <Stack\n        as=\"main\"\n        spacing={8}\n        justifyContent=\"center\"\n        alignItems=\"flex-start\"\n        m=\"0 auto 4rem auto\"\n        maxWidth=\"700px\"\n        >\n\n      <Flex>\n      <BasicMeta url={url} title={title} />\n      <OpenGraphMeta url={url} title={title} />\n      <TwitterCardMeta url={url} title={title} />\n      <TagPostList posts={posts} tag={tag} pagination={pagination} />\n      </Flex>\n      </Stack>\n    </Layout>\n  );\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const queries = params.slug as string[];\n  const [slug, page] = [queries[0], queries[1]];\n  const posts = listPostContent(\n    page ? parseInt(page as string) : 1,\n    config.posts_per_page,\n    slug\n  );\n  const tag = getTag(slug);\n  const pagination = {\n    current: page ? parseInt(page as string) : 1,\n    pages: Math.ceil(countPosts(slug) / config.posts_per_page),\n  };\n  const props: {\n    posts: PostContent[];\n    tag: TagContent;\n    pagination: { current: number; pages: number };\n    page?: string;\n  } = { posts, tag, pagination };\n  if (page) {\n    props.page = page;\n  }\n  return {\n    props,\n  };\n};\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const paths = listTags().flatMap((tag) => {\n    const pages = Math.ceil(countPosts(tag.slug) / config.posts_per_page);\n    return Array.from(Array(pages).keys()).map((page) =>\n      page === 0\n        ? {\n            params: { slug: [tag.slug] },\n          }\n        : {\n            params: { slug: [tag.slug, (page + 1).toString()] },\n          }\n    );\n  });\n  return {\n    paths: paths,\n    fallback: false,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}