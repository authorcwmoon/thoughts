{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christian/thoughts/src/components/Subscribe.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { Heading, InputGroup, Box, Input, InputRightElement, Button, Text, useToast, useColorMode } from '@chakra-ui/core';\n\nvar Subscribe = function Subscribe() {\n  _s();\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var inputEl = useRef(null);\n  var toast = useToast();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var bgColor = {\n    light: 'yellow.50',\n    dark: 'yellow.500'\n  };\n  var borderColor = {\n    light: 'yellow.200',\n    dark: 'yellow.400'\n  };\n\n  var subscribe = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, _yield$res$json, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setLoading(true);\n              _context.next = 4;\n              return fetch('/.netlify/functions/subscribe', {\n                body: JSON.stringify({\n                  email: inputEl.current.value\n                }),\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                method: 'POST'\n              });\n\n            case 4:\n              res = _context.sent;\n              setLoading(false);\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              _yield$res$json = _context.sent;\n              error = _yield$res$json.error;\n\n              if (!error) {\n                _context.next = 13;\n                break;\n              }\n\n              toast({\n                title: 'An error occurred.',\n                description: error,\n                status: 'error',\n                duration: 3000,\n                isClosable: true\n              });\n              return _context.abrupt(\"return\");\n\n            case 13:\n              // trackGoal('JYFUFMSF', 0);\n              // inputEl.current.value = '';\n              toast({\n                title: 'Success!',\n                description: 'You are now subscribed.',\n                status: 'success',\n                duration: 3000,\n                isClosable: true\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function subscribe(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Box, {\n    border: \"1px solid\",\n    borderColor: borderColor[colorMode],\n    bg: bgColor[colorMode],\n    borderRadius: 4,\n    padding: 6,\n    my: 4,\n    alignSelf: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    as: \"h5\",\n    size: \"lg\",\n    mb: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Read my journal.\"), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Susbscribe for breakfast emails that taste best with coffee.\"), __jsx(InputGroup, {\n    size: \"md\",\n    mt: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    \"aria-label\": \"Email for newsletter\",\n    placeholder: \"friend@gmail.com\",\n    ref: inputEl,\n    type: \"email\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), __jsx(InputRightElement, {\n    width: \"6.75rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    isLoading: loading,\n    fontWeight: \"bold\",\n    h: \"1.75rem\",\n    size: \"sm\",\n    onClick: subscribe,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Subscribe\"))));\n};\n\n_s(Subscribe, \"Xwt/xzIl59aqp4pPV6LkGA+J2kE=\", false, function () {\n  return [useToast, useColorMode];\n});\n\n_c = Subscribe;\nexport default Subscribe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Subscribe\");","map":{"version":3,"sources":["/Users/christian/thoughts/src/components/Subscribe.tsx"],"names":["React","useState","useRef","Heading","InputGroup","Box","Input","InputRightElement","Button","Text","useToast","useColorMode","Subscribe","loading","setLoading","inputEl","toast","colorMode","bgColor","light","dark","borderColor","subscribe","e","preventDefault","fetch","body","JSON","stringify","email","current","value","headers","method","res","json","error","title","description","status","duration","isClosable"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  Heading,\n  InputGroup,\n  Box,\n  Input,\n  InputRightElement,\n  Button,\n  Text,\n  useToast,\n  useColorMode\n} from '@chakra-ui/core';\n\nconst Subscribe = () => {\n  const [loading, setLoading] = useState(false);\n  const inputEl = useRef(null);\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n  const bgColor = {\n    light: 'yellow.50',\n    dark: 'yellow.500'\n  };\n  const borderColor = {\n    light: 'yellow.200',\n    dark: 'yellow.400'\n  };\n\n  const subscribe = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    const res = await fetch('/.netlify/functions/subscribe', {\n      body: JSON.stringify({\n        email: inputEl.current.value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n\n    setLoading(false);\n    const { error } = await res.json();\n\n    if (error) {\n      toast({\n        title: 'An error occurred.',\n        description: error,\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      });\n\n      return;\n    }\n\n    // trackGoal('JYFUFMSF', 0);\n    // inputEl.current.value = '';\n    toast({\n      title: 'Success!',\n      description: 'You are now subscribed.',\n      status: 'success',\n      duration: 3000,\n      isClosable: true\n    });\n  };\n\n  return (\n    <Box\n      border=\"1px solid\"\n      borderColor={borderColor[colorMode]}\n      bg={bgColor[colorMode]}\n      borderRadius={4}\n      padding={6}\n      my={4}\n      alignSelf=\"center\"\n    >\n      <Heading as=\"h5\" size=\"lg\" mb={2}>\n        Read my journal.\n      </Heading>\n      <Text>\n        Susbscribe for breakfast emails that taste best with coffee.\n      </Text>\n      <InputGroup size=\"md\" mt={4}>\n        <Input\n          aria-label=\"Email for newsletter\"\n          placeholder=\"friend@gmail.com\"\n          ref={inputEl}\n          type=\"email\"\n        />\n        <InputRightElement width=\"6.75rem\">\n          <Button\n            isLoading={loading}\n            fontWeight=\"bold\"\n            h=\"1.75rem\"\n            size=\"sm\"\n            onClick={subscribe}\n          >\n            Subscribe\n          </Button>\n        </InputRightElement>\n      </InputGroup>\n    </Box>\n  );\n};\n\nexport default Subscribe;"]},"metadata":{},"sourceType":"module"}