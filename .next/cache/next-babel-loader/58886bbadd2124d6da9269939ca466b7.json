{"ast":null,"code":"var _jsxFileName = \"/Users/christian/thoughts/src/pages/search.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport BasicMeta from \"../components/meta/BasicMeta\";\nimport OpenGraphMeta from \"../components/meta/OpenGraphMeta\";\nimport TwitterCardMeta from \"../components/meta/TwitterCardMeta\";\nimport TagPostList from \"../components/TagPostList\";\nimport { Stack, Flex } from \"@chakra-ui/core\";\nexport var __N_SSG = true;\nexport default function Index(_ref) {\n  var posts = _ref.posts,\n      tag = _ref.tag,\n      pagination = _ref.pagination,\n      page = _ref.page;\n  var url = \"/posts/tags/\".concat(tag.name) + (page ? \"/\".concat(page) : \"\");\n  var title = tag.name;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    as: \"main\",\n    spacing: 8,\n    justifyContent: \"center\",\n    alignItems: \"flex-start\",\n    m: \"0 auto 4rem auto\",\n    maxWidth: \"700px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 8\n    }\n  }, __jsx(Flex, {\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    alignItems: \"flex-start\",\n    maxWidth: \"700px\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(BasicMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), __jsx(OpenGraphMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), __jsx(TwitterCardMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), __jsx(TagPostList, {\n    posts: posts,\n    tag: tag,\n    pagination: pagination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }))));\n}\n_c = Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/christian/thoughts/src/pages/search.tsx"],"names":["Layout","BasicMeta","OpenGraphMeta","TwitterCardMeta","TagPostList","Stack","Flex","Index","posts","tag","pagination","page","url","name","title"],"mappings":";;;AACA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAKA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,iBAA5B;;AAWA,eAAe,SAASC,KAAT,OAAwD;AAAA,MAAvCC,KAAuC,QAAvCA,KAAuC;AAAA,MAAhCC,GAAgC,QAAhCA,GAAgC;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAfC,IAAe,QAAfA,IAAe;AACrE,MAAMC,GAAG,GAAG,sBAAeH,GAAG,CAACI,IAAnB,KAA6BF,IAAI,cAAOA,IAAP,IAAgB,EAAjD,CAAZ;AACA,MAAMG,KAAK,GAAGL,GAAG,CAACI,IAAlB;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,MAAC,KAAD;AACC,IAAA,EAAE,EAAC,MADJ;AAEC,IAAA,OAAO,EAAE,CAFV;AAGC,IAAA,cAAc,EAAC,QAHhB;AAIC,IAAA,UAAU,EAAC,YAJZ;AAKC,IAAA,CAAC,EAAC,kBALH;AAMC,IAAA,QAAQ,EAAC,OANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASD,MAAC,IAAD;AACA,IAAA,aAAa,EAAC,QADd;AAEA,IAAA,cAAc,EAAC,YAFf;AAGA,IAAA,UAAU,EAAC,YAHX;AAIA,IAAA,QAAQ,EAAC,OAJT;AAKA,IAAA,CAAC,EAAC,MALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMA,MAAC,SAAD;AAAW,IAAA,GAAG,EAAED,GAAhB;AAAqB,IAAA,KAAK,EAAEE,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANA,EAOA,MAAC,aAAD;AAAe,IAAA,GAAG,EAAEF,GAApB;AAAyB,IAAA,KAAK,EAAEE,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPA,EAQA,MAAC,eAAD;AAAiB,IAAA,GAAG,EAAEF,GAAtB;AAA2B,IAAA,KAAK,EAAEE,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARA,EASA,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEN,KAApB;AAA2B,IAAA,GAAG,EAAEC,GAAhC;AAAqC,IAAA,UAAU,EAAEC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATA,CATC,CADH,CADF;AAyBD;KA5BuBH,K","sourcesContent":["import { GetStaticPaths, GetStaticProps } from \"next\";\nimport Layout from \"../components/Layout\";\nimport BasicMeta from \"../components/meta/BasicMeta\";\nimport OpenGraphMeta from \"../components/meta/OpenGraphMeta\";\nimport TwitterCardMeta from \"../components/meta/TwitterCardMeta\";\nimport TagPostList from \"../components/TagPostList\";\nimport config from \"../lib/config\";\nimport { countPosts, listPostContent, PostContent } from \"../lib/posts\";\nimport { getTag, listTags, TagContent } from \"../lib/tags\";\nimport Head from \"next/head\";\nimport { Stack, Flex } from \"@chakra-ui/core\";\n\ntype Props = {\n  posts: PostContent[];\n  tag: TagContent;\n  page?: string;\n  pagination: {\n    current: number;\n    pages: number;\n  };\n};\nexport default function Index({ posts, tag, pagination, page }: Props) {\n  const url = `/posts/tags/${tag.name}` + (page ? `/${page}` : \"\");\n  const title = tag.name;\n  return (\n    <Layout>\n       <Stack\n        as=\"main\"\n        spacing={8}\n        justifyContent=\"center\"\n        alignItems=\"flex-start\"\n        m=\"0 auto 4rem auto\"\n        maxWidth=\"700px\"\n        >\n\n      <Flex\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n      alignItems=\"flex-start\"\n      maxWidth=\"700px\"\n      w=\"100%\">\n      <BasicMeta url={url} title={title} />\n      <OpenGraphMeta url={url} title={title} />\n      <TwitterCardMeta url={url} title={title} />\n      <TagPostList posts={posts} tag={tag} pagination={pagination} />\n      </Flex>\n      </Stack>\n    </Layout>\n  );\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const queries = params.slug as string[];\n  const [slug, page] = [queries[0], queries[1]];\n  const posts = listPostContent(\n    page ? parseInt(page as string) : 1,\n    config.posts_per_page,\n    slug\n  );\n  const tag = getTag(slug);\n  const pagination = {\n    current: page ? parseInt(page as string) : 1,\n    pages: Math.ceil(countPosts(slug) / config.posts_per_page),\n  };\n  const props: {\n    posts: PostContent[];\n    tag: TagContent;\n    pagination: { current: number; pages: number };\n    page?: string;\n  } = { posts, tag, pagination };\n  if (page) {\n    props.page = page;\n  }\n  return {\n    props,\n  };\n};\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const paths = listTags().flatMap((tag) => {\n    const pages = Math.ceil(countPosts(tag.slug) / config.posts_per_page);\n    return Array.from(Array(pages).keys()).map((page) =>\n      page === 0\n        ? {\n            params: { slug: [tag.slug] },\n          }\n        : {\n            params: { slug: [tag.slug, (page + 1).toString()] },\n          }\n    );\n  });\n  return {\n    paths: paths,\n    fallback: false,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}