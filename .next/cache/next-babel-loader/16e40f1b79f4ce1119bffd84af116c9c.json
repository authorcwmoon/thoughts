{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christian/thoughts/src/components/ViewCounter.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport format from 'comma-number';\nimport { Flex } from '@chakra-ui/core';\nimport { realtimeDb } from '../lib/db';\n\nvar ViewCounter = function ViewCounter(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  var _useState = useState(''),\n      views = _useState[0],\n      setViews = _useState[1];\n\n  useEffect(function () {\n    var onViews = function onViews(newViews) {\n      return setViews(newViews.val());\n    };\n\n    var db;\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return realtimeDb();\n\n              case 2:\n                db = _context.sent;\n                db.child(id).on('value', onViews);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n    return function () {\n      if (db) {\n        db.child(id).off('value', onViews);\n      }\n    };\n  }, [id]);\n  useEffect(function () {\n    var registerView = function registerView() {\n      return fetch(\".netlify/functions/increment-views?id=\".concat(encodeURIComponent(id)));\n    };\n\n    registerView();\n  }, [id]);\n  return __jsx(Flex, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, \"`$\", views ? format(views) : '–––', \" views`\");\n};\n\n_s(ViewCounter, \"cK2j/pnJgDoPX06RFGKZ+JZjIqI=\");\n\n_c = ViewCounter;\nexport default ViewCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewCounter\");","map":{"version":3,"sources":["/Users/christian/thoughts/src/components/ViewCounter.tsx"],"names":["React","useState","useEffect","format","Flex","realtimeDb","ViewCounter","id","views","setViews","onViews","newViews","val","db","fetchData","child","on","off","registerView","fetch","encodeURIComponent"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAUEC,IAVF,QAWO,iBAXP;AAcA,SAASC,UAAT,QAA2B,WAA3B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAY;AAAA;;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACJN,QAAQ,CAAC,EAAD,CADJ;AAAA,MACvBO,KADuB;AAAA,MAChBC,QADgB;;AAG9BP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD;AAAA,aAAcF,QAAQ,CAACE,QAAQ,CAACC,GAAT,EAAD,CAAtB;AAAA,KAAhB;;AACA,QAAIC,EAAJ;;AAEA,QAAMC,SAAS;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACLT,UAAU,EADL;;AAAA;AAChBQ,gBAAAA,EADgB;AAEhBA,gBAAAA,EAAE,CAACE,KAAH,CAASR,EAAT,EAAaS,EAAb,CAAgB,OAAhB,EAAyBN,OAAzB;;AAFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATI,SAAS;AAAA;AAAA;AAAA,OAAf;;AAKAA,IAAAA,SAAS;AAET,WAAO,YAAM;AACX,UAAID,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACE,KAAH,CAASR,EAAT,EAAaU,GAAb,CAAiB,OAAjB,EAA0BP,OAA1B;AACD;AACF,KAJD;AAKD,GAhBQ,EAgBN,CAACH,EAAD,CAhBM,CAAT;AAkBAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,YAAY,GAAG,SAAfA,YAAe;AAAA,aACnBC,KAAK,iDAA0CC,kBAAkB,CAACb,EAAD,CAA5D,EADc;AAAA,KAArB;;AAGAW,IAAAA,YAAY;AACb,GALQ,EAKN,CAACX,EAAD,CALM,CAAT;AAOA,SAAO,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASC,KAAK,GAAGL,MAAM,CAACK,KAAD,CAAT,GAAmB,KAAjC,YAAP;AACD,CA7BD;;GAAMF,W;;KAAAA,W;AA+BN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport format from 'comma-number';\nimport {\n  Heading,\n  InputGroup,\n  Box,\n  Input,\n  InputRightElement,\n  Button,\n  Text,\n  useToast,\n  useColorMode,\n  Flex\n} from '@chakra-ui/core';\n\n\nimport { realtimeDb } from '../lib/db';\n\nconst ViewCounter = ({ id }) => {\n  const [views, setViews] = useState('');\n\n  useEffect(() => {\n    const onViews = (newViews) => setViews(newViews.val());\n    let db;\n\n    const fetchData = async () => {\n      db = await realtimeDb();\n      db.child(id).on('value', onViews);\n    };\n\n    fetchData();\n\n    return () => {\n      if (db) {\n        db.child(id).off('value', onViews);\n      }\n    };\n  }, [id]);\n\n  useEffect(() => {\n    const registerView = () =>\n      fetch(`.netlify/functions/increment-views?id=${encodeURIComponent(id)}`);\n\n    registerView();\n  }, [id]);\n\n  return <Flex>`${views ? format(views) : '–––'} views`</Flex>;\n};\n\nexport default ViewCounter;"]},"metadata":{},"sourceType":"module"}