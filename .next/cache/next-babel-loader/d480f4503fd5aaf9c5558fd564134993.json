{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/** @jsx jsx */\nimport { Box, Callout, Code, Heading, Kbd, Link, PseudoBox, Text, Divider, useColorMode } from '@chakra-ui/core';\nimport { jsx } from '@emotion/core';\nimport NextLink from 'next/link';\n\nconst Table = props => jsx(Box, {\n  overflowX: \"scroll\",\n  w: \"full\"\n}, jsx(Box, _extends({\n  as: \"table\",\n  textAlign: \"left\",\n  mt: \"32px\",\n  w: \"full\"\n}, props)));\n\nconst THead = props => {\n  const {\n    colorMode\n  } = useColorMode();\n  const bg = {\n    light: 'gray.50',\n    dark: 'whiteAlpha.100'\n  };\n  return jsx(Box, _extends({\n    as: \"th\",\n    bg: bg[colorMode],\n    fontWeight: \"semibold\",\n    p: 2,\n    fontSize: \"sm\"\n  }, props));\n};\n\nconst TData = props => jsx(Box, _extends({\n  as: \"td\",\n  p: 2,\n  borderTopWidth: \"1px\",\n  borderColor: \"inherit\",\n  fontSize: \"sm\",\n  whiteSpace: \"normal\"\n}, props));\n\nconst CustomLink = props => {\n  const {\n    colorMode\n  } = useColorMode();\n  const color = {\n    light: 'hsl(208, 99%, 44%)',\n    dark: 'hsl(208, 95%, 68%)'\n  };\n  const href = props.href;\n  const isInternalLink = href && (href.startsWith('/') || href.startsWith('#'));\n\n  if (isInternalLink) {\n    return jsx(NextLink, {\n      href: href,\n      passHref: true\n    }, jsx(Link, _extends({\n      color: color[colorMode]\n    }, props)));\n  }\n\n  return jsx(Link, _extends({\n    color: color[colorMode],\n    isExternal: true\n  }, props));\n};\n\nconst Quote = props => {\n  const {\n    colorMode\n  } = useColorMode();\n  const bgColor = {\n    light: 'blue.50',\n    dark: 'blue.900'\n  };\n  return jsx(Callout, _extends({\n    mt: 4,\n    w: \"98%\",\n    bg: bgColor[colorMode],\n    variant: \"left-accent\",\n    status: \"info\",\n    css: {\n      '> *:first-of-type': {\n        marginTop: 0,\n        marginLeft: 8\n      }\n    }\n  }, props));\n};\n\nconst DocsHeading = props => jsx(Heading, _extends({\n  css: {\n    scrollMarginTop: '100px',\n    scrollSnapMargin: '100px',\n    // Safari\n    '&[id]': {\n      pointerEvents: 'none'\n    },\n    '&[id]:before': {\n      display: 'block',\n      height: ' 6rem',\n      marginTop: '-6rem',\n      visibility: 'hidden',\n      content: `\"\"`\n    },\n    '&[id]:hover a': {\n      opacity: 1\n    }\n  }\n}, props, {\n  mb: \"1em\",\n  mt: \"2em\"\n}), jsx(Box, {\n  pointerEvents: \"auto\"\n}, props.children, props.id && jsx(PseudoBox, {\n  \"aria-label\": \"anchor\",\n  as: \"a\",\n  color: \"blue.500\",\n  fontWeight: \"normal\",\n  outline: \"none\",\n  _focus: {\n    opacity: 1,\n    boxShadow: 'outline'\n  } // opacity=\"0\"\n  ,\n  ml: \"0.375rem\" // href={`#${props.id}`}\n\n}, \"#\")));\n\nconst Hr = () => {\n  const {\n    colorMode\n  } = useColorMode();\n  const borderColor = {\n    light: 'gray.200',\n    dark: 'gray.600'\n  };\n  return jsx(Divider, {\n    borderColor: borderColor[colorMode],\n    my: 4,\n    w: \"100%\"\n  });\n};\n\nconst MDXComponents = {\n  h1: props => jsx(Heading, _extends({\n    as: \"h1\",\n    size: \"xl\",\n    my: 4\n  }, props)),\n  h2: props => jsx(DocsHeading, _extends({\n    as: \"h2\",\n    fontWeight: \"bold\",\n    size: \"lg\"\n  }, props)),\n  h3: props => jsx(DocsHeading, _extends({\n    as: \"h3\",\n    size: \"md\",\n    fontWeight: \"bold\"\n  }, props)),\n  inlineCode: props => jsx(Code, _extends({\n    variantColor: \"yellow\",\n    fontSize: \"0.84em\"\n  }, props)),\n  kbd: Kbd,\n  br: props => jsx(Box, _extends({\n    height: \"24px\"\n  }, props)),\n  hr: Hr,\n  table: Table,\n  th: THead,\n  td: TData,\n  a: CustomLink,\n  p: props => jsx(Text, _extends({\n    as: \"p\",\n    mt: 4,\n    lineHeight: \"tall\"\n  }, props)),\n  ul: props => jsx(Box, _extends({\n    as: \"ul\",\n    pt: 2,\n    pl: 4,\n    ml: 2\n  }, props)),\n  ol: props => jsx(Box, _extends({\n    as: \"ol\",\n    pt: 2,\n    pl: 4,\n    ml: 2\n  }, props)),\n  li: props => jsx(Box, _extends({\n    as: \"li\",\n    pb: 1\n  }, props)),\n  blockquote: Quote\n};\nexport { CustomLink };\nexport default MDXComponents;","map":null,"metadata":{},"sourceType":"module"}