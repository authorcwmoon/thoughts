{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../../components/Layout\";\nimport BasicMeta from \"../../../components/meta/BasicMeta\";\nimport OpenGraphMeta from \"../../../components/meta/OpenGraphMeta\";\nimport TwitterCardMeta from \"../../../components/meta/TwitterCardMeta\";\nimport TagPostList from \"../../../components/TagPostList\";\nimport config from \"../../../lib/config\";\nimport { countPosts, listPostContent } from \"../../../lib/posts\";\nimport { getTag, listTags } from \"../../../lib/tags\";\nimport { Stack, Flex } from \"@chakra-ui/core\";\nexport default function Index({\n  posts,\n  tag,\n  pagination,\n  page\n}) {\n  const url = `/posts/tags/${tag.name}` + (page ? `/${page}` : \"\");\n  const title = tag.name;\n  return __jsx(Layout, null, __jsx(Stack, {\n    as: \"main\",\n    spacing: 8,\n    justifyContent: \"center\",\n    alignItems: \"flex-start\",\n    m: \"0 auto 4rem auto\",\n    maxWidth: \"700px\"\n  }, __jsx(Flex, {\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    alignItems: \"flex-start\",\n    maxWidth: \"700px\",\n    w: \"100%\"\n  }, __jsx(BasicMeta, {\n    url: url,\n    title: title\n  }), __jsx(OpenGraphMeta, {\n    url: url,\n    title: title\n  }), __jsx(TwitterCardMeta, {\n    url: url,\n    title: title\n  }), __jsx(TagPostList, {\n    posts: posts,\n    tag: tag,\n    pagination: pagination\n  }))));\n}\nexport const getStaticProps = async ({\n  params\n}) => {\n  const queries = params.slug;\n  const [slug, page] = [queries[0], queries[1]];\n  const posts = listPostContent(page ? parseInt(page) : 1, config.posts_per_page, slug);\n  const tag = getTag(slug);\n  const pagination = {\n    current: page ? parseInt(page) : 1,\n    pages: Math.ceil(countPosts(slug) / config.posts_per_page)\n  };\n  const props = {\n    posts,\n    tag,\n    pagination\n  };\n\n  if (page) {\n    props.page = page;\n  }\n\n  return {\n    props\n  };\n};\nexport const getStaticPaths = async () => {\n  const paths = listTags().flatMap(tag => {\n    const pages = Math.ceil(countPosts(tag.slug) / config.posts_per_page);\n    return Array.from(Array(pages).keys()).map(page => page === 0 ? {\n      params: {\n        slug: [tag.slug]\n      }\n    } : {\n      params: {\n        slug: [tag.slug, (page + 1).toString()]\n      }\n    });\n  });\n  return {\n    paths: paths,\n    fallback: false\n  };\n};","map":null,"metadata":{},"sourceType":"module"}